/*
 * generated by Xtext
 */
package de.nittka.tooling.xarchive.validation

import de.nittka.tooling.xarchive.xarchive.Document
import org.eclipse.xtext.validation.Check
import de.nittka.tooling.xarchive.xarchive.CategoryType
import java.util.Set
import de.nittka.tooling.xarchive.xarchive.XarchivePackage

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class XarchiveValidator extends AbstractXarchiveValidator {

	val public static FILE_NAME="filename"

	@Check
	def checkDuplicateCategory(Document doc) {
		val Set<CategoryType> types=newHashSet()
		doc.categories.forEach[
			val t=it.type
			if (types.contains(t)){
				error("duplicate category", it, XarchivePackage.Literals.CATEGORY_REF__TYPE)
			}else{
				types.add(t)
			}
		]
	}

	@Check
	def checkFileName(Document doc) {
		val resourceName=doc.eResource.URI.trimFileExtension.lastSegment
		if(doc.name!=resourceName){
			error('''illegal file name: '«resourceName»' expected''', XarchivePackage.Literals.DOCUMENT__NAME, FILE_NAME, doc.name, resourceName)
		}
	}


}
